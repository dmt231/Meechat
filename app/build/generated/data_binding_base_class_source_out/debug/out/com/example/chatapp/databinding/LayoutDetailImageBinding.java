// Generated by view binder compiler. Do not edit!
package com.example.chatapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.chatapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutDetailImageBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView cancelImage;

  @NonNull
  public final ImageView detailImage;

  @NonNull
  public final ImageView downloadImage;

  @NonNull
  public final RelativeLayout fragmentDetailImage;

  @NonNull
  public final ImageView optionShare;

  private LayoutDetailImageBinding(@NonNull RelativeLayout rootView, @NonNull ImageView cancelImage,
      @NonNull ImageView detailImage, @NonNull ImageView downloadImage,
      @NonNull RelativeLayout fragmentDetailImage, @NonNull ImageView optionShare) {
    this.rootView = rootView;
    this.cancelImage = cancelImage;
    this.detailImage = detailImage;
    this.downloadImage = downloadImage;
    this.fragmentDetailImage = fragmentDetailImage;
    this.optionShare = optionShare;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutDetailImageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutDetailImageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_detail_image, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutDetailImageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelImage;
      ImageView cancelImage = ViewBindings.findChildViewById(rootView, id);
      if (cancelImage == null) {
        break missingId;
      }

      id = R.id.detailImage;
      ImageView detailImage = ViewBindings.findChildViewById(rootView, id);
      if (detailImage == null) {
        break missingId;
      }

      id = R.id.downloadImage;
      ImageView downloadImage = ViewBindings.findChildViewById(rootView, id);
      if (downloadImage == null) {
        break missingId;
      }

      RelativeLayout fragmentDetailImage = (RelativeLayout) rootView;

      id = R.id.optionShare;
      ImageView optionShare = ViewBindings.findChildViewById(rootView, id);
      if (optionShare == null) {
        break missingId;
      }

      return new LayoutDetailImageBinding((RelativeLayout) rootView, cancelImage, detailImage,
          downloadImage, fragmentDetailImage, optionShare);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
